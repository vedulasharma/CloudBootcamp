buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
		mavenLocal()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")
		classpath 'com.netflix.nebula:nebula-release-plugin:4.1.0'
		classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2"
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
}

apply plugin: 'war'
apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: "io.spring.dependency-management"
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'nebula.nebula-release'

repositories {
    mavenCentral()
}

dependencyManagement {
	imports {
	  mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.0.4.RELEASE'
	  mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Brixton.RELEASE'
	}
}
  
group = 'com.homedepot.fi.rv'
  
configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	exclude group: 'org.springframework.boot', module: 'logback-classic'
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'

	// Actuator - Production ready metrics and monitoring support
	compile("org.springframework.boot:spring-boot-starter-actuator") 

	// Web - Tomcat and full-stack REST, Spring WebMVC
	compile("org.springframework.boot:spring-boot-starter-web")
	
	// AOP
	compile("org.springframework.boot:spring-boot-starter-aop") 
	
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '1.4.1.RELEASE'
	
	compile("org.springframework:spring-context")
	
	compile 'org.springframework.cloud:spring-cloud-core:1.2.3.RELEASE'
	
	// Use Log4J2 instead
	compile 'org.springframework.boot:spring-boot-starter-log4j2'
	compile 'org.apache.logging.log4j:log4j-web:2.1'
	
	// Use Jackson XML
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

	// Swagger documentation
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'
	
	compile 'com.wordnik:swagger-jersey2-jaxrs_2.10:1.3.13'
	compile 'com.mangofactory:swagger-springmvc:1.0.2'
	compile 'com.google.code.gson:gson:2.4'
	
	compile 'org.json:json:20151123'
	compile 'org.codehaus.jettison:jettison:1.1'
	
    testCompile group: 'junit', name: 'junit', version: '4.+'
	
	// Tests with Spring support
	testCompile ("org.springframework.boot:spring-boot-starter-test") 
	
	//Testing with Groovy
	testCompile("org.codehaus.groovy:groovy-all:2.3.7")
	testCompile('org.spockframework:spock-core:1.0-groovy-2.3')
	
	//Mocking with Spock
	testCompile 'org.objenesis:objenesis:1.4'
	testCompile "cglib:cglib:2.2"
}

sonarqube {
	properties {
		//property "sonar.host.url", "http://151.140.135.183:9000"
		property "sonar.exclusions","**/model/**,**/aspects/**,**/util/**,**/interceptor/**,**/controller/ApiController*,**/exception/ServiceApplicationException*"
	}
}

war {
	baseName = 'CL_StoreSettings'
	version =  ''
}

test {
	testLogging {
		events 'started', 'passed'
	}
	
	reports {
		junitXml.enabled = false
		html.enabled = true
	}
}

jacoco {
	toolVersion = "0.7.7.201606060606"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

sourceSets {
	main.java.srcDirs 'src/main/java'
	main.resources.srcDirs 'src/main/resources'
	test.java.srcDirs 'src/test/java'
	test.java.srcDirs 'src/test/groovy'
}

task getVersion{
	println project.version
}

task zip(type: Zip) {

	def fromFile = 'build/libs/' + rootProject.name + '.war'

	from fromFile
	from 'manifest.yml'
}

task zipTests(type: Zip){
	def fromFile = "build/reports/tests/test"
	from fromFile

	baseName = rootProject.name
	classifier = "TestResults"
	version = project.version
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file("$rootDir/build/distributions/" + rootProject.name + "-" + version + ".zip"))

			artifact zipTests {
				classifier "TestResults"
			}
		}
	}
}

artifactory {

	def repo
	if(project.version.toString().endsWith('-SNAPSHOT')) {
		repo = "libs-snapshot-local"
	} else {
		repo = "libs-release-local"
	}
	
	contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
	publish {
		repository {
			repoKey = repo
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
		}
		defaults { publications ('mavenJava') }
	}
	resolve {
		repository {
			repoKey = 'libs-release-local'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
		}
	}
}

nebulaRelease {
	addReleaseBranchPattern(/develop/)
	addReleaseBranchPattern(/hotfix.*/)
}

tasks.artifactoryPublish.dependsOn('zip')
tasks.zip.dependsOn('build');
group 'RedisJava'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
